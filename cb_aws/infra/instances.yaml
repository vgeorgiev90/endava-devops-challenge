---
Mappings:
  EnvMap:                                                                               
    Staging:
      Subnet: "subnet-e0073786"
      Subnet2: "subnet-c62d509c"
      Subnet3: "subnet-285f5c60"
      VmType: "t3.medium"
      BuildServerVmType: "t3.medium"
      OssecVmType: "t3.medium"
      SshKeyName: "cobrowser"
      VpcId: "vpc-70448309"
      VpcCidr: "172.31.0.0/16"
      VPNAMI: ""
      BuildServerAMI: ""
      OSSECAMI: ""
    Production:
      Subnet: "subnet-e0073786"
      Subnet2: "subnet-c62d509c"
      Subnet3: "subnet-285f5c60"
      VmType: "t3.medium"
      BuildServerVmType: "t3.medium"
      OssecVmType: "t3.medium"
      SshKeyName: "cobrowser"
      VpcId: "vpc-70448309"
      VpcCidr: "172.31.0.0/16"
      VPNAMI: ""
      BuildServerAMI: ""
      OSSECAMI: ""

Parameters:
  Environment:
    Type: String
    AllowedValues: ["Staging", "Production"]


Resources:
  RoleSSM:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/SecretsManagerReadWrite"

  InstancesProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref RoleSSM

  WireguardInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          install:
            - Setup
        Setup:
          commands:
            '01_get_provisioning_script':
               command:
                 apt install -y awscli
    Properties:
      ImageId: "ami-04137ed1a354f54c4"
      KeyName: !FindInMap [EnvMap, !Ref Environment, SshKeyName]
      InstanceType: !FindInMap [EnvMap, !Ref Environment, VmType]
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          SubnetId: !FindInMap [EnvMap, !Ref Environment, Subnet]
          GroupSet:
            - !Ref GenericInstanceSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: '30'
            DeleteOnTermination: 'true'
            Encrypted: 'false'
      IamInstanceProfile: !Ref InstancesProfile
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          apt update && apt install python-pip -y
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource WireguardInstance --configsets install --region ${AWS::Region}
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName}   --resource WireguardInstance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: Wireguard-VPN


  BuildServer:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          install:
            - Setup
        Setup:
          commands:
            '01_get_provisioning_script':
               command:
                 apt install -y awscli 
    Properties:
      ImageId: "ami-04137ed1a354f54c4"
      KeyName: !FindInMap [EnvMap, !Ref Environment, SshKeyName]
      InstanceType: !FindInMap [EnvMap, !Ref Environment, BuildServerVmType]
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          SubnetId: !FindInMap [EnvMap, !Ref Environment, Subnet]
          GroupSet:
            - !Ref GenericInstanceSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: '50'
            DeleteOnTermination: 'true'
            Encrypted: 'false'
      IamInstanceProfile: !Ref InstancesProfile
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          apt update && apt install python-pip -y
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource BuildServer --configsets install --region ${AWS::Region}
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName}   --resource BuildServer --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: BuildServer
          
          
  OssecInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          install:
            - Setup
        Setup:
          commands:
            '01_get_provisioning_script':
               command:
                 apt install -y awscli 
    Properties:
      ImageId: "ami-04137ed1a354f54c4"
      KeyName: !FindInMap [EnvMap, !Ref Environment, SshKeyName]
      InstanceType: !FindInMap [EnvMap, !Ref Environment, OssecVmType]
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          SubnetId: !FindInMap [EnvMap, !Ref Environment, Subnet]
          GroupSet:
            - !Ref GenericInstanceSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: '40'
            DeleteOnTermination: 'true'
            Encrypted: 'false'
      IamInstanceProfile: !Ref InstancesProfile
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          apt update && apt install python-pip -y
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource OssecInstance --configsets install --region ${AWS::Region}
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName}   --resource OssecInstance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: Ossec-Server

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: VPN-LB
      GroupDescription: Security group for staging VPN LB
      VpcId: !FindInMap [EnvMap, !Ref Environment, VpcId]
      SecurityGroupIngress:
      - IpProtocol: udp
        FromPort: 61443
        ToPort: 61443
        CidrIp: "0.0.0.0/0"
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: VPN LB


  GenericInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: OTF-EC2-Applications
      GroupDescription: Security group OTF EC2 applications
      VpcId: !FindInMap [EnvMap, !Ref Environment, VpcId]
      SecurityGroupIngress:
      - IpProtocol: -1
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      - IpProtocol: -1
        CidrIp: !FindInMap [EnvMap, !Ref Environment, VpcCidr]
        Description: vpc traffic
      Tags:
        - Key: Name
          Value: GenericSecurityGroup


  VPNLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: Staging VPN
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: true
      Subnets:
        - !FindInMap [EnvMap, !Ref Environment, Subnet]
        - !FindInMap [EnvMap, !Ref Environment, Subnet2]
        - !FindInMap [EnvMap, !Ref Environment, Subnet3]
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Type: network
      Tags:
        - Key: Name
          Value: StagingVpn


  LoadBalancerListenerVPN:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref VPNLoadBalancer
      Port: 61443
      Protocol: UDP
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WireguardTargetGroupVPN

  LoadBalancerListenerSSH:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref VPNLoadBalancer
      Port: 22
      Protocol: TCP
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WireguardTargetGroupSSH

  WireguardTargetGroupVPN:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: Staging VPN
      VpcId: !FindInMap [EnvMap, !Ref Environment, VpcId]
      Port: 61443
      Protocol: UDP
      TargetType: instance
      Targets:
        - Id: !Ref WireguardInstance
          Port: 80
      HealthCheckIntervalSeconds: 180
      HealthCheckPort: 22
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 30
      UnhealthyThresholdCount: 5
      HealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: Staging VPN

  WireguardTargetGroupSSH:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: Staging VPN SSH
      VpcId: !FindInMap [EnvMap, !Ref Environment, VpcId]
      Port: 22
      Protocol: TCP
      TargetType: instance
      Targets:
        - Id: !Ref WireguardInstance
          Port: 80
      HealthCheckIntervalSeconds: 180
      HealthCheckPort: 22
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 30
      UnhealthyThresholdCount: 5
      HealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: Staging VPN

  VPNDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : Z08828721FQ55R1V3OTAC
      Name: vpn.aws.cobrowser.io
      TTL: '60'
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt 'VPNLoadBalancer.CanonicalHostedZoneNameID'
        DNSName: !GetAtt 'VPNLoadBalancer.DNSName'

Outputs:
  LoadBalancerDNS:
    Value: !GetAtt VPNLoadBalancer.DNSName
  VPNIP:
    Value: !GetAtt WireguardInstance.PrivateIp
  BuildServerIP:
    Value: !GetAtt BuildServer.PrivateIp
  OSSECIP:
    Value: !GetAtt OssecInstance.PrivateIp
